import { users } from "@/db/schemas/users-schema";
import {
  createInsertSchema,
  createSelectSchema,
  createUpdateSchema,
} from "drizzle-zod";
import { z } from "zod";

// Infer the Drizzle schema types for full user data
export type User = typeof users.$inferSelect;
export type NewUser = typeof users.$inferInsert;

// Zod schema for creating a new user (input validation)
// Omit fields that are auto-generated or not set during creation
export const CreateUserSchema = createInsertSchema(users, {
  // id will be generated by $defaultFn in schema-helper.ts
  email: z.string().email("Invalid email address."),
  username: z
    .string()
    .min(3, "Username must be at least 3 characters long.")
    .max(50, "Username must be at most 50 characters long.")
    .optional(),
  phoneNumber: z
    .string()
    .min(10, "Phone number must be at least 10 digits.")
    .optional(),
  type: z.enum(["individual", "business"]).default("individual"),
  // password and other sensitive fields usually handled separately (e.g., auth service)
}).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  emailVerified: true,
  phoneNumberVerified: true,
  isOnline: true,
  banned: true,
  banReason: true,
  banExpires: true,
  isVerified: true,
  followersCount: true,
  followingCount: true,
});

// Zod schema for updating an existing user (input validation)
export const UpdateUserSchema = createUpdateSchema(users, {
  id: z.string().length(36, "Invalid Post ID format.").optional(),
});

// Zod schema for selecting a user (output validation/typing, though Drizzle types handle this)
export const SelectUserSchema = createSelectSchema(users);

// Example for API response structure (can be extended)
export const UserResponseSchema = SelectUserSchema.omit({
  // Potentially omit sensitive fields for public API responses
  // email: true, // Example of omitting email for public view
});

export type CreateUserInput = z.infer<typeof CreateUserSchema>;
export type UpdateUserInput = z.infer<typeof UpdateUserSchema>;
export type UserResponse = z.infer<typeof UserResponseSchema>;
